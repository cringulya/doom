#+title: doom-emacs config
#+author: Artem Son
#+startup: content

* TABLE OF CONTENTS :toc:
- [[#theme][Theme]]
- [[#font][Font]]
- [[#options][Options]]
  - [[#evil-tweaks][Evil tweaks]]
- [[#keybindings][Keybindings]]
- [[#plugins][Plugins]]
  - [[#dired][Dired]]
  - [[#completion][Completion]]
- [[#coding][Coding]]
  - [[#eshell][Eshell]]
  - [[#cc][C/C++]]
  - [[#latex][Latex]]

* Theme
#+begin_src emacs-lisp
(add-to-list 'custom-theme-load-path "~/.config/doom/themes")
(setq doom-theme 'doom-rose-pine)
#+end_src

* Font
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Iosevka Nerd Font Mono" :size 28 :weight 'regular)
      doom-variable-pitch-font (font-spec :family "Iosevka Nerd Font Mono" :size 28 :weight 'regular)
      doom-symbol-font (font-spec :family "Iosevka Nerd Font Mono")
      doom-big-font (font-spec :family "Iosevka Nerd Font Mono" :size 33 :weight 'bold))
#+end_src

* Options
Quality of life options
#+begin_src emacs-lisp
(setq-default tab-width 2)
(setq display-line-numbers 'relative)
(setq mac-option-modifier 'meta)

(setq split-width-threshold 0
      split-height-threshold nil)

(+global-word-wrap-mode +1)
#+end_src

** Evil tweaks
#+begin_src emacs-lisp
;; restore s/S vim behaviour
(remove-hook 'doom-first-input-hook #'evil-snipe-mode)

;; enable clipboard
(setq select-enable-clipboard nil
      select-enable-primary nil
      save-interprogram-paste-before-kill t
      mouse-yank-at-point t)

(if (featurep :system 'macos)
    (map! :gie "s-v" #'clipboard-yank
          :map evil-visual-state-map
          :gv "s-c" #'clipboard-kill-ring-save)
  (map! :gie "C-v" #'clipboard-yank
        :map evil-visual-state-map
        :gv "C-c" #'clipboard-kill-ring-save)
  )
#+end_src

#+RESULTS:

* Keybindings
#+begin_src emacs-lisp
(map! :n "C-r" #'undo-redo
      :n "C-j" #'evil-window-down
      :n "C-k" #'evil-window-up
      :n "C-h" #'evil-window-left
      :n "C-l" #'evil-window-right
      :n "Q" #'kill-this-buffer
      :n "L" #'evil-end-of-line
      :n "H" #'evil-beginning-of-line
      :n "M-F" #'+format/buffer
      :gn "` RET" #'quickrun-shell)
#+end_src

* Plugins
** Dired
#+begin_src emacs-lisp
(defun vertico-kill-buffer ()
  (interactive)
  (when-let ((buffer (get-buffer (vertico--candidate))))
    (kill-buffer buffer)
    (message "Killed buffer: %s" (buffer-name buffer))))

(map! :map vertico-map
      "C-d" #'vertico-kill-buffer)
#+end_src

** Completion
#+begin_src emacs-lisp
(after! corfu
  (setq +corfu-want-ret-to-confirm t)
  (setq +corfu-want-tab-prefer-expand-snippets t)
  (setq +corfu-want-tab-prefer-navigating-snippets t)
  (setq +corfu-want-tab-prefer-navigating-org-tables t)
  (setq corfu-preview-current nil)
  (setq corfu-preselect 'first)
  (setq corfu-count 6)

  (map! :map corfu-map
        :i "<tab>"     (lambda() (interactive) (corfu-insert) (corfu-complete))))
#+end_src


* Coding
** Eshell
#+begin_src emacs-lisp
(after! quickrun
  (advice-add 'quickrun-shell :after
              (lambda (&rest _)
                (let ((eshell-buffer (get-buffer "*eshell-quickrun*")))
                  (when eshell-buffer
                    (pop-to-buffer eshell-buffer)))))
  (map! :map quickrun--eshell-map
        :gi "<escape>" #'quickrun--eshell-window-restore)
  )
#+end_src

** C/C++
#+begin_src emacs-lisp
(after! lsp-mode
  (setq lsp-clients-clangd-executable "clangd"))


(use-package! cmake-ide
  :config (cmake-ide-setup))

(add-hook! c++-mode (map! :map c++-mode-map
      :leader
      :prefix ("l", "lsp")
      :desc "Switch between header/source" "h" #'lsp-clangd-find-other-file))

(after! quickrun
  (quickrun-add-command "c++/custom"
    '((:command . "c++")
      (:exec . ("%c -std=c++23 -o %e %s" "%e"))
      (:remove . ("%e")))
    :default "c++"))

#+end_src

** Latex
#+begin_src emacs-lisp
(after! tex
  (setq tex-output-dir "build"))

(add-hook 'latex-mode-hook (lambda ()
                             (add-hook 'after-save-hook #'TeX-command-run-all nil t)))

(if (featurep :system 'macos)
    (add-hook 'latex-mode-hook
              (setq TeX-view-program-selection
                    '((output-pdf "PDF Tools")
                     (output-dvi "open")
                     (output-pdf "open")
                     (output-html "open")
                     (output-pdf "preview-pane"))
)))
#+end_src
