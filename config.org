#+title: doom-emacs config
#+author: Artem Son
#+startup: content

* TABLE OF CONTENTS :toc:
- [[#theme][Theme]]
- [[#font][Font]]
- [[#options][Options]]
  - [[#evil-tweaks][Evil tweaks]]
- [[#keybindings][Keybindings]]
- [[#plugins][Plugins]]
  - [[#dired][Dired]]
  - [[#completion][Completion]]
- [[#coding][Coding]]
  - [[#lsp][Lsp]]
  - [[#cc][C/C++]]
  - [[#latex][Latex]]

* Theme
#+begin_src emacs-lisp
(setq doom-theme 'doom-tokyo-night)
#+end_src

* Font
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Iosevka Nerd Font Mono" :size 22 :weight 'regular)
      doom-symbol-font (font-spec :family "Iosevka Nerd Font Mono")
      doom-big-font (font-spec :family "Iosevka Nerd Font Mono" :size 24))
#+end_src

* Options
Quality of life options
#+begin_src emacs-lisp
(setq-default tab-width 2)
(setq display-line-numbers 'relative)

(+global-word-wrap-mode +1)
#+end_src

** Evil tweaks
#+begin_src emacs-lisp
;; restore s/S vim behaviour
(remove-hook 'doom-first-input-hook #'evil-snipe-mode)

;; enable clipboard
(setq select-enable-clipboard t
      select-enable-primary t
      save-interprogram-paste-before-kill t
      mouse-yank-at-point t)

(map! :map evil-insert-state-map
      :gi "C-v" #'clipboard-yank)

(map! :map evil-visual-state-map
      :gv "C-c" #'clipboard-kill-ring-save)
#+end_src

* Keybindings
#+begin_src emacs-lisp
(map! :map evil-normal-state-map
      "C-r" #'undo-redo
      "C-j" #'evil-window-down
      "C-k" #'evil-window-up
      "C-h" #'evil-window-left
      "C-l" #'evil-window-right
      "Q" #'kill-this-buffer
      "L" #'evil-end-of-line
      "H" #'evil-beginning-of-line
      "M-F" #'+format-lsp-buffer
      "` RET" #'projectile-run-command)
#+end_src

* Plugins
** Dired
#+begin_src emacs-lisp
(defun vertico-kill-buffer ()
  (interactive)
  (when-let ((buffer (get-buffer (vertico--candidate))))
    (kill-buffer buffer)
    (message "Killed buffer: %s" (buffer-name buffer))))

(map! :map vertico-map
      "C-d" #'vertico-kill-buffer)
#+end_src

** Completion
#+begin_src emacs-lisp
(after! corfu
  (setq +corfu-want-ret-to-confirm t)
  (setq +corfu-want-tab-prefer-expand-snippets t)
  (setq +corfu-want-tab-prefer-navigating-snippets t)
  (setq +corfu-want-tab-prefer-navigating-org-tables t)
  (setq corfu-preview-current nil)
  (setq corfu-preselect 'first)

  (map! :map corfu-map
        :i "<tab>"     (lambda() (interactive) (corfu-insert) (corfu-complete))))
#+end_src

#+RESULTS:

* Coding
** Lsp
#+begin_src emacs-lisp
#+end_src
** C/C++
#+begin_src emacs-lisp
(after! lsp-mode
  (setq lsp-clients-clangd-executable "clangd")) ; Ensure `clangd` is installed

(use-package! cmake-ide
  :config (cmake-ide-setup))

(add-hook! c++-mode (map! :map c++-mode-map
      :leader
      :prefix ("l", "lsp")
      :desc "Switch between header/source" "h" #'lsp-clangd-find-other-file))

#+end_src

** Latex
#+begin_src emacs-lisp
(after! tex
  (setq tex-output-dir "build"))

(add-hook 'latex-mode-hook (lambda ()
                             (add-hook 'after-save-hook #'TeX-command-run-all nil t)))
#+end_src
